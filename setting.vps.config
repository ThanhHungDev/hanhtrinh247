# thông tin vps
202.182.110.215
Us2-}}YqvKU)LU%D

# cập nhật lại ubuntu

Bước 1: Cập nhật Ubuntu
Đầu tiên, bạn cần cập nhật Ubuntu với hai câu lệnh sau:
	apt-get update
	apt-get upgrade

## Cài đặt Nginx

Nginx đã có sẵn trong repository, bạn chỉ cần cài đặt với câu lệnh apt-get quen thuộc:
	apt-get install -y nginx

Sau khi Nginx đã được cài đặt, khởi động Nginx và bật nó tự chạy khi khởi động lại VPS bằng 2 câu lệnh sau:
	systemctl start nginx
	systemctl enable nginx
	
Bạn có thể kiểm tra để thấy nginx đã chạy ở cổng 80 bằng câu lệnh netstat:
	netstat -plntu



# Cài đặt PHP-7.3

Add the PHP 7 Repositories, Run the following commands, as root, 
to install the PHP repositories to your sources.list, update apt-get and install.
    sudo add-apt-repository ppa:ondrej/php
    sudo apt-get update
    sudo apt-get install php7.3-fpm

nhớ search google cài thêm GD extention cho hệ thống nap image
apt-get -y install unzip zip php7.3-gd php7.3-mbstring php7.3-xml php7.3-curl php7.3-mysql php7.3-common php7.3-pgsql

Bây giờ chúng ta chạy PHP-FPM và bật nó chạy tự động khi khởi động lại VPS.
	systemctl start php7.3-fpm || sudo systemctl stop php7.3-fpm
	systemctl enable php7.3-fpm

Mặc định PHP-FPM sẽ chạy ở file sock trên Ubuntu. Bạn có thể test lại với câu lệnh sau:
	netstat -pl | grep php7.3-fpm

sock php-fpm
/var/run/php/php7.3-fpm.sock;


# Cài đặt PHP Composer
Composer là bộ quản lý package cho ngôn ngữ lập trình PHP. Trên Ubuntu 16.04 Composer đã có sẵn trong repository do vậy bạn có thể cài đặt bằng câu lệnh apt.

Cài đặt PHP Composer bằng câu lệnh sau:
	sudo apt-get install -y composer
Sau khi cài đặt thành công, chạy lệnh composer bạn sẽ nhìn thấy kết quả như bên dưới:
	composer -v



# cài cơ sở dữ liệu PostgreSQL

Đầu tiên các bạn tiến hành  cập nhật hệ thống bằng lệnh sau
sudo apt update && sudo apt upgrade -y

Sau khi quá trình cập nhật hoàn tất hãy sử dụng lệnh sau để cài đặt PostgreSQL
sudo apt install postgresql postgresql-contrib -y

chú ý báo đỏ :
Success. You can now start the database server using: 
/usr/lib/postgresql/10/bin/pg_ctl -D /var/lib/postgresql/10/main -l logfile start

Ver Cluster Port Status Owner    Data directory              Log file
10  main    5432 down   postgres /var/lib/postgresql/10/main /var/log/postgresql/postgresql-10-main.log


By default, postgres creates a user named 'postgres'. 
We log in as here, and give here a password.

    sudo -u postgres psql
        \password
            Enter password: ...
            ...
Logout of psql by typing \q or ctrl+d. Then we connect as 'postgres'.
 
##### cài pgadmin4 ubuntu 18.04
##### sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'

###### sudo apt install wget ca-certificates

###### wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add

##### sudo apt update

##### sudo apt install pgadmin4

    psql -U postgres -h localhost

# Config remote server For psql 10
    sudo vi /etc/postgresql/10/main/postgresql.conf

    you can search for postgresql.conf

    sudo find / -name "postgresql.conf"

        listen_addresses = '*'

    Step 2. Configuring pg_hba.conf sudo vi /etc/postgresql/9.6/main/pg_hba.conf
        # All IPs
        host    all             all              all                 md5

# clone source từ server git về hoặc tạo 1 source mới với laravel như sau

=> git clone https://github.com/ThanhHungDev/hanhtrinh247.git ebudezain
hoặc => composer create-project laravel/laravel ebudezain 7.3.*




# cài đặt server nginx chạy php-fpm trên host

nếu đã tồn tại đường dẫn thì xoá đi
rm -f /etc/nginx/sites-enabled/ebudezain.com.conf

vào đường dẫn 
nano /etc/nginx/sites-available/ebudezain.com.conf

dưới đây là cấu hình VPS chuẩn chỉ có http ta dán vào nội dung file vừa mở

server {
    listen 80;
    listen [::]:80 ipv6only=on;

    # Log files for Debugging
    access_log /var/log/nginx/ebudezain-access.log;
    error_log /var/log/nginx/ebudezain-error.log;

    # Webroot Directory for ebudezain project
    root /var/www/ebudezain/SERVER_PHP/public;
    index index.html index.php index.htm;

    # Your Domain Name
    server_name ebudezain.com www.ebudezain.com;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # PHP-FPM Configuration Nginx
    location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass unix:/var/run/php/php7.3-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
    }
}
sau đó lưu file và thoát ra 

Chúng ta cần thay đổi quyền sở hữu thư mục project Laravel về user ‘www-data’, 
và thay đổi permission thư mục thành 755.
chown -R www-data:root /var/www/ebudezain/SERVER_PHP
chmod 755 /var/www/ebudezain/SERVER_PHP/storage
chu y quyen 777


copy file chuẩn bị qua file chạy thật
ln -s /etc/nginx/sites-available/ebudezain.com.conf /etc/nginx/sites-enabled/

### rm -f /etc/nginx/sites-enabled/ebudezain.com.conf

kiểm tra nginx mới có bình thường không 
nginx -t

systemctl restart nginx


lúc này cần chỉnh lại file .env của laravel 
sau đó tạo db 

#### $ sudo -u postgres psql
$ psql -h localhost -U postgres

postgres=# CREATE DATABASE ebudezain;

postgres=# \list

postgres=# \q


export db vào 
postgres=# pg_dump -U postgres hanhtrinh247 > /var/www/hanhtrinh247/SERVER_PHP/hung.test.11.sql;

postgres=# psql -h 127.0.0.1 -p 5432 -U postgres ebudezain < /var/www/ebudezain/hanhtrinh247.29.sql;




1. Cài đặt certbot
sudo add-apt-repository ppa:certbot/certbot
sudo apt update
sudo apt install certbot

Sau khi hoàn tất, trên máy sẽ có thêm 1 lệnh letsencrypt. Bạn thử kiểm tra lại bằng cách gõ letsencrypt --version. 
Đây là phần client của dịch vụ Let's Enscrypt.

cài xong có khi đang gõ http nó tự redirect qua https

2. cấu hình cho nginx nhận certbot
- cấu hình laravel để có thể chạy let scrypt
 
server {
    listen 80;
    listen [::]:80;

    # Log files for Debugging
    access_log /var/log/nginx/ebudezain-access.log;
    error_log /var/log/nginx/ebudezain-error.log;

    # Webroot Directory for ebudezain project
    root /var/www/hanhtrinh247/SERVER_PHP/public;
    index index.html index.php index.htm;

    # Your Domain Name
    server_name ebudezain.com www.ebudezain.com;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    # PHP-FPM Configuration Nginx
    location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass unix:/var/run/php/php7.3-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
    }

    location ~ /.well-known {
        allow all;
    }
}



sau khi thêm 
location ~ /.well-known {
        allow all;
    }
thif Thư mục .well-known là nơi Let's Enscrypt sẽ thử access. Bây giờ chúng ta cấu hình lại nginx để từ bên ngoài có thể truy cập đến http://domain.pro/index.html và http://domain.pro/.well-known
Load lại thiết lập nginx:

sudo service nginx reload
Nếu mọi thứ chính xác, reload lại trang http://getsolution.pro, chúng ta sẽ nhận được nội dung index.html:

3. Tạo SSL Certificate files
Với lệnh như dưới:

Tạo SSL certificate (thay example.com bằng tên miền của bạn và /var/www/example.com là đường dẫn đến thư mục gốc của website):

sudo letsencrypt certonly -a webroot --webroot-path=/var/www/ebudezain/SERVER_PHP/public -d ebudezain.com -d www.ebudezain.com
Nếu thành công output sẽ trông như sau:

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/ebudezain.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/ebudezain.com/privkey.pem
   Your cert will expire on 2020-11-27. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot
   again. To non-interactively renew *all* of your certificates, run
   "certbot renew"
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le



Bước 3: Cấu hình SSL cho website

Để tăng tính bảo mật, tạo Strong Diffie-Hellman Group (dùng cho Nginx) :

sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
Tạo 1 snippet cho Nginx để có thể tái sử dụng được khi muốn cấu hình cho nhiều website:

sudo nano /etc/nginx/snippets/ssl-params.conf
Nội dung file như sau:

ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
ssl_ecdh_curve secp384r1;
ssl_session_cache shared:SSL:10m;
ssl_stapling on;
ssl_stapling_verify on;
ssl_dhparam /etc/ssl/certs/dhparam.pem;

resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;

add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;

thiết lập server https lại như sau:

server {
    listen      80;
    server_name ebudezain.com www.ebudezain.com;
    return      301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_certificate     /etc/letsencrypt/live/ebudezain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ebudezain.com/privkey.pem;

    include snippets/ssl-params.conf;

    # Log files for Debugging
    access_log /var/log/nginx/ebudezain-access.log;
    error_log /var/log/nginx/ebudezain-error.log;

    # Webroot Directory for ebudezain project
    root /var/www/hanhtrinh247/SERVER_PHP/public;
    index index.html index.php index.htm;

    # Your Domain Name
    server_name ebudezain.com www.ebudezain.com;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # PHP-FPM Configuration Nginx
    location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass unix:/var/run/php/php7.3-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
    }

    location ~ /\.ht {
        deny all;
    }

    location ~ /.well-known {
        allow all;
    }
}

copy file chuẩn bị qua file chạy thật
ln -s /etc/nginx/sites-available/ebudezain.com.conf /etc/nginx/sites-enabled/

### rm -f /etc/nginx/sites-enabled/ebudezain.com.conf

kiểm tra nginx mới có bình thường không 
nginx -t

nếu ok thì 
Bây giờ bạn restart lại nginx
systemctl restart nginx


5. gia hạn liên tục

thêm cron vào vps
sudo apt-get update
sudo apt-get install cron

sudo crontab -e

30 0 1 */2 * /usr/bin/letsencrypt renew && /bin/systemctl reload nginx



cài nodejs 

Bước 1: Kích hoạt kho lưu trữ NodeSource
Kích hoạt kho lưu trữ NodeSource bằng cách chạy lệnh sau

curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
Nếu bạn cần cài đặt phiên bản khác, ví dụ 14.x, chỉ cần thay đổi setup_12.x bằng setup_14.x

1.2. Bước 2: Cài đặt Node.js
Sau khi thêm kho lưu trữ NodeSource, hãy cài đặt Node.js và npm bằng lệnh sau:

sudo apt install nodejs -y
Để kiểm tra phiên bản Nodejs các bạn dùng lệnh sau

node --version



lưu ý cách xoá 1 cái gì ra khỏi ubuntu 
sudo apt-get purge mongo*

# cài mongodb 
https://vinasupport.com/mongodb-la-gi-huong-dan-cai-dat-mongodb-tren-ubuntu/

Bước 1: Import “MongoDB public GPG Key” sử dụng command apt-key
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4

Bước 2: Thêm repo của MongoDB

Với Ubuntu 16.04 LTS:

echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list

Với Ubuntu 18.04 LTS:
echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list

Để biết phiên bản Ubuntu bạn đang sử dụng là gì thì hay chạy lệnh: lsb_release -dc

Bước 3: Cập nhật lại packages

sudo apt-get update

Bước 4: Cài đặt MongoDB

Cài bản mới nhất:

sudo apt-get install -y mongodb-org

Cài đặt 1 phiên bản bất kỳ:

sudo apt-get install -y mongodb-org=4.0.10 mongodb-org-server=4.0.10 mongodb-org-shell=4.0.10 mongodb-org-mongos=4.0.10 mongodb-org-tools=4.0.10
Bước 5: Khởi động MongoDB

sudo service mongod start
Kiểm tra MongoDB đã được cài đặt thành công chưa?

sudo service mongod status


Part Two: Configuring MongoDB username/password
By now, you have installed all the packages of MongoDB. Then next is configuring the username and password for your database server.

Step 1: Open the mongo shell
Before setting up the username and password you must open the mongoDB shell for your database server. 
Type in:

Sau khi đã vào bên trong, bạn tạo database bằng lệnh use. Lưu ý là không giống với SQL language, 
không có lệnh “create databases”, chỉ có lệnh use. 
Nếu database đã tồn tại, nó sẽ được dùng, nếu không lệnh này sẽ tạo ra database.

use [database_name]

Chỉ đơn giản vậy thôi.

Step 2: change the database administrator
Once you are logged in the shell, type the command below to switch to the administrator database:

use admin
Step 3: Create a root user
Now you can create an admin username, then create its password. Use the following command to achieve this:

db.createUser({user:"admin", pwd:"admin123", roles:[{role:"root", db:"admin"}]})
From the command above it clear you have created a user called admin with password set as admin123. The user has the role/permission as rootuser whereas the database is admin.


hoặc : db.createUser({ user: "ebudezain", pwd: "admin123", roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]})

Có nhiều roles (chức vụ) khác nhau cho user như dbAdmin, dbUser, read, vâng vâng. Nên tốt nhất là xem bộ tài liệu chính thức của MongoDB để xem cách dễ dùng nhất là gì

Giờ bạn có thể hiển thị tất cả người dùng tới giờ bằng lệnh:
show users


Kích hoạt chứng thực từ xa trong MongoDB
Mặc định, MongoDB cho phép toàn bộ log ghi từ máy local. Không có vấn đề gì đối với ứng dụng đang triển khai trên đó.

Tuy nhiên, vì bạn cần chứng thực, bạn có thể gặp lỗi khi ứng dụng đã sẵn sàng và cần deploy.

Để tránh gặp lỗi, mở file /etc/mongodb.conf và đặt bình luận vào dòng bindIP: 127.0.0.1.

sudo nano /etc/mongodb.conf
#bindIP: 127.0.0.1.
Tiếp theo, khởi động lại dịch vụ. Bạn có thể chỉnh port mặc định của MongoDB trong cùng một file.

sudo systemctl restart mongodb
Giờ chỉ có user local có thể login mà không cần chứng thực vào MongoDB. Nếu server bị xâm nhập, hoặc bạn muốn tăng bảo mật, bạn có thể bật dòng bindIP: 127.0.0.1 lên bằng cách gỡ dấu commen (#) ra.


Hiển thị các database trong MongoDB bằng lệnh show databases hoặc show dbs

Tạo mới database ebu sau đấy hiển thị các database

$ mongo
$ use ebu
$ show dbs




With NPM:

$ npm install pm2 -g
Or if you don't have Node.js installed:


pm2 delete sitters
pm2 start index.js --name "sitters" --watch

pm2 logs

pm2 flush sitters




thêm nginx cho chat dạng http 
nano /etc/nginx/sites-available/chat.ebudezain.com.conf
# Default server configuration
server {
        listen 80;
        listen [::]:80;
        server_name chat.ebudezain.com;

    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Allow location for Acme challenge - you also might need to allow 'dotfiles' in Express (see next section)
    location ~ /.well-known {
        allow all;
	    proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
    }	
}

$ nginx -t 
$ ln -s /etc/nginx/sites-available/chat.ebudezain.com.conf /etc/nginx/sites-enabled/
$ sudo service nginx reload

Second, you will generate an SSL certificate with certbot :
$ certbot certonly --manual

////////////////////////////////
https://itnext.io/node-express-letsencrypt-generate-a-free-ssl-certificate-and-run-an-https-server-in-5-minutes-a730fbe528ca
# server {
#    listen      80;
#    server_name chat.ebudezain.com;
#    return      301 https://$server_name$request_uri;
# }
# the IP(s) on which your node server is running. I chose port 9999.
upstream chat.ebudezain.com {
    server 127.0.0.1:3000;
}
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    ssl_certificate     /etc/letsencrypt/live/chat.ebudezain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/chat.ebudezain.com/privkey.pem;
    
    include snippets/ssl-params.conf;

    server_name chat.ebudezain.com;
    # Log files for Debugging
    access_log /var/log/nginx/chat-ebudezain-access.log;
    error_log /var/log/nginx/chat-ebudezain-error.log;

    location / {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_pass http://127.0.0.1:3000;
            proxy_redirect off;
    }
}
